// Single line comments only allowed (not technically JSON compliant, but allows for non-value commenting)
// Use "/" for file paths.  If not, "\" must be escaped (NOTE: will work in Windows either way);
{
	"build": "prod"                           // "prod" build type - only valid values are "prod" and "dev"
,	"root": ""                                // default's to working directory
,	"folders": {                              // folders created by builder
		"scratch": "tmp"                      // directory name/path for temporary file creation during build (will be deleted on cleanup) - created as "root"/"scratch"
	,	"build":   "bin"                      // target for built files.  NOTE: will be placed inside filetype directory: "root"/[js/css/html]/"build"
	,	"package": "pkg"                      // TODO: target for package of files (if production.package flag set to true).  NOTE: files will be placed inside filetype sub-directory: "root"/"package"/[js/css/html]
	}
,	"keepScratch": "false"                    // when true, prevents removal of scratch directory upon completion ( note: if not deleting, and scratch in source dir - scratch should be added to ignores lists )
,	"types": [ "js","css","html" ]            // types of files to be grouped / built.
,	"ignores": [                              // global folders ignored ( ignored for all file types )
		"tmp"                                 // ignoring scratch dir, by default.
	]
,	"typeProps": {
		"js": {
			"extension": "js"
		,	"block_comment": "/*! -CONTENT- */"
		,	"dev_include": "document.write('<scr'+'ipt type=\"text/javascript\" src=\"-CONTENT-\"></scr'+'ipt>')"
		,	"compressable": "true"
		,	"documentable": "true"
		,	"ignores": [                      // Foldernames to ignore
//				"folderName"                  // Example - ignores folder named "folderName"
			]
		,	"firsts": [                       // filenames / patterns (identified by first two characters "=~") to be sorted first in build (takes precedence over "lasts").
//				"=~^at_set"                   // Example - matches all filenames that start with "b"
//			,	"=~_"                         // Example - matches any filename that includes "_"
			]
		,	"lasts": [                        // filenames / patterns (identified by first tow characters "=~") to be sorted last in build
//				"at_unset.js"                 // Example - matches file named "at_unset.js"
			]
		,	"folder": ""                      // Relative to folders.source (see above) If any value included will target search for files of this type to a specific directory (rather than using all of folders.source)
		,	"build"	: ""                      // Relative to root.  If any value,  root/[value]/[folders.build]/ will be used instead of root/[extension]/[folders.build]/
		,	"prepend": ""                     // will prepend all content - good for wrapper functions
		,	"postpend": ""                    // will finish content - good for closing wrapper functions
		}
	, "css": {
			"extension": "css"
		,	"block_comment": "/*! -CONTENT- */"
		,	"dev_include": "@import \"-CONTENT-\";"
		,	"compressable": "true"
		,	"documentable": "false"
		,	"ignores": []
		,	"firsts": []
		,	"lasts": []
		,	"folder": ""
		,	"build"	: ""
		,	"prepend": ""
		,	"postpend": ""
		}
	, "html": {
			"extension": "html"
		,	"block_comment": "<!-- -CONTENT- -->"
		,	"dev_include": "<!--#include virtual=\"-CONTENT-\" -->"
		,	"compressable": "false"
		,	"documentable": "false"
		,	"ignores": []
		,	"firsts": []
		,	"lasts": []
		,	"folder": ""
		,	"build"	: ""
		,	"prepend": ""
		,	"postpend": ""
		}
	}
,	"prod": {                                 // Only used in production builds
		"compression": "true"                 // Whether or not to use compression
	,	"compressor": {                       // Used to compress your output files
			"exe": "java"
		,	"exeArgs": " -jar"
		,	"engine": "ext/yuicompressor-2.4.2.jar"
		,	"engArgs": " --line-break 1000 -v"
		}
	, 	"package": "false"
	,	"keep": [                             // Variables for use in preprocessing - keys included will be kept
//		,	"debug"                           // Example - This would ensure that all code enclosed in #ifdef debug -> #endif blocks will be included (unless innerblock disables)
//		,	"debugInner"                      // Example - This would ensure that all code encolsed in #ifdef debugInner -> #endif blocks will be included (unless innerblock disables)
//		,	"etc"                             // Example - And so on
		]
	}
,	"dev": {
		"url": ""                             // Prepended to all paths in dev build - No trailing slashes
	}
,	"document": "true"                       // Whether or not to document - defaults to true for prod-build, false for dev build.  Setting in config will override.
,	"documenter": {                           // Used to document your output files
		"exe": "java"                         // defaults to "java" - could have absolute value: e.g. C:/Program Files/Java/jre1.6.0_20/bin/java.exe
	,	"exeArgs": " -jar"
	,	"enginePath": "ext/jsdoc-toolkit"     // expected to be relative to working directory
	,	"engines": [
			"/jsrun.jar"                      // expected to be relative enginePath
		,	"/app/run.js"                     // expected to be relative enginePath
		]
	,	"engArgs": {
			"d": "docs/js"                    // path for output (relative to root directory)
		,	"r": "10"                         // recursion depth
		,	"a": "true"                       // all functions documented (even un-commented ones)
		,	"t"	: "ext/jsdoc-toolkit/templates/jsdoc"   // path to templates (relative to builder dir)
		}
	}
}
